{
    "api.error": "API returned an error: {}",
    "api.executor.exception": "{} API executor exception: {}",
    "api.response": "Response:",
    "api.time.apihz.exception": "apihz API request exception: {}",
    "api.time.apihz.failed": "apihz API request failed with status code: {}",
    "api.time.apihz.fetching": "Fetching time from apihz API...",
    "api.time.apihz.parse.success": "Successfully parsed apihz API response",
    "api.time.apihz.success": "Successfully fetched time from apihz",
    "api.time.worldclock.exception": "WorldClockAPI request exception: {}",
    "api.time.worldclock.failed": "WorldClockAPI request failed with status code: {}",
    "api.time.worldclock.fetching": "Fetching time from WorldClockAPI...",
    "api.time.worldclock.parse.success": "Successfully parsed WorldClockAPI response",
    "api.time.worldclock.success": "Successfully fetched time from WorldClockAPI",
    "api.time.worldtime.exception": "WorldTimeAPI request exception: {}",
    "api.time.worldtime.failed": "WorldTimeAPI request failed with status code: {}",
    "api.time.worldtime.fetching": "Fetching time from WorldTimeAPI...",
    "api.time.worldtime.parse.success": "Successfully parsed WorldTimeAPI response",
    "api.time.worldtime.success": "Successfully fetched time from WorldTimeAPI",
    "app.started": "Application started",
    "certificate.download.error": "Certificate download error: {}",
    "certificate.download.request": "Making certificate download request to {}",
    "certificate.download.response": "Received certificate download response with status code: {}",
    "certificate.download.save.failed": "Failed to save certificate",
    "certificate.download.save.success": "Certificate downloaded and saved successfully",
    "certificate.download.waiting": "Waiting 1 second before downloading certificate...",
    "certificate.info": "Certificate info - Domains: {}, Valid until: {}",
    "certificate.save.error": "Error saving certificate files: {}",
    "certificate.save.success": "Successfully saved certificate files to: {} and {}",
    "config.created": "Default configuration file has been created. Please edit it with your actual settings and run the program again.",
    "config.loaded": "Loaded configuration from: {}",
    "config.path": "Configuration file path: {}",
    "logger.debug.api.request": "Making API request to {}",
    "logger.debug.end.time.info": "End time: {}, Current time: {}",
    "logger.debug.found.item.mark": "Found item with target mark",
    "logger.debug.found.items": "Found {} items in response",
    "logger.debug.item.end.time": "Item end time: {}",
    "logger.debug.looking.mark": "Looking for target mark: {}",
    "logger.debug.parsed.api.response": "Successfully parsed API response",
    "logger.debug.received.response": "Received response with status code: {}",
    "logger.debug.time.converted": "Converted current time to timezone-naive for comparison",
    "logger.debug.time.difference": "Time difference: {} days, {} hours, {} minutes, {} seconds",
    "logger.error.mark.not.found": "Item with mark \"{}\" not found",
    "logger.error.network.time": "Failed to fetch network time, using local time instead",
    "logger.error.not.found": "Config file not found. Creating default configuration.",
    "logger.error.parse": "Error parsing config file. Creating default configuration.",
    "logger.error.request": "Request error: {}",
    "logger.info.fetching.network.time": "Fetching network time...",
    "logger.info.making.request": "Making API request...",
    "logger.info.time.remaining": "Time remaining: {} days {} hours {} minutes {} seconds",
    "renewal.debug.api.request": "Making renewal API request to {}",
    "renewal.debug.api.response": "Received renewal response with status code: {}",
    "renewal.error.api": "Renewal API error: {}",
    "renewal.error.process": "Error during renewal process: {}",
    "renewal.info.pausing": "Pausing for 1 second to avoid high concurrency issues...",
    "renewal.not.needed": "Certificate does not need renewal. Domain ID: {}", 
    "renewal.success": "Successfully renewed certificate. Response ID: {}",
    "renewal.warning.expiring": "Certificate will expire in less than 14 days! Domain ID: {}"
}